// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderingService.Data.EF;

namespace OrderingService.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200329140555_OrderAndReviewExpanded")]
    partial class OrderAndReviewExpanded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OrderingService.Data.Models.EmployeeProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("ServiceCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmployeeProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54fbd4e7-8d93-4d34-9cb1-c5abaa8559fe"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 55.65m,
                            ServiceTypeId = 1,
                            UserId = new Guid("56d5d4c0-f660-45dc-80c9-ac7560c68444")
                        },
                        new
                        {
                            Id = new Guid("4220f113-22a8-46ab-828e-900be3e2356d"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 100.12m,
                            ServiceTypeId = 2,
                            UserId = new Guid("5c9d8a55-75a7-456d-9587-18fe1f03e8e1")
                        },
                        new
                        {
                            Id = new Guid("f046f928-cb81-4c82-8bdd-a79ed18a4b7e"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 5.93m,
                            ServiceTypeId = 3,
                            UserId = new Guid("5facbc29-a063-4662-9a53-9b7c54483792")
                        },
                        new
                        {
                            Id = new Guid("856acf14-008c-4fb0-8c55-e022161e7442"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 25.65m,
                            ServiceTypeId = 4,
                            UserId = new Guid("d7a1b12a-aa05-4c0e-b11b-a17ea8141d75")
                        },
                        new
                        {
                            Id = new Guid("2e444113-02ae-4067-9f96-2d1030d6109c"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 75.3m,
                            ServiceTypeId = 5,
                            UserId = new Guid("88aecc17-f381-403c-99dc-311a56725a63")
                        },
                        new
                        {
                            Id = new Guid("84a05df2-8559-4fb8-bb3b-1a98c9bf9197"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 143.4m,
                            ServiceTypeId = 6,
                            UserId = new Guid("594679c1-241d-4dbe-b1a6-307a2c477531")
                        },
                        new
                        {
                            Id = new Guid("262bc294-d8fc-49cb-9968-65bbd045effa"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 45.3m,
                            ServiceTypeId = 6,
                            UserId = new Guid("7f0fac7a-2490-4c8e-804e-b4942f2b90ea")
                        },
                        new
                        {
                            Id = new Guid("d088406d-0ce4-4073-8af2-4745dfc8a44e"),
                            Description = "In Entity Framework before .NET Core, entity framework had a way to create seed data but that method had a number of issues so they decided not to bring it over to Entity Framework Core. Now that we're into version 2.1 of Entity Framework Core, they wanted to allow for a way to seed the data with certain types of data.",
                            ServiceCost = 84.94m,
                            ServiceTypeId = 6,
                            UserId = new Guid("d0d1b0b8-0033-42b9-a800-daecc05277ae")
                        });
                });

            modelBuilder.Entity("OrderingService.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("OrderingService.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user"
                        },
                        new
                        {
                            Id = 2,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("OrderingService.Data.Models.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BriefTask")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ServiceDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("OrderingService.Data.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "it-specialist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "plumber"
                        },
                        new
                        {
                            Id = 3,
                            Name = "guitarist"
                        },
                        new
                        {
                            Id = 4,
                            Name = "mechanic"
                        },
                        new
                        {
                            Id = 5,
                            Name = "teacher"
                        },
                        new
                        {
                            Id = 6,
                            Name = "lawyer"
                        });
                });

            modelBuilder.Entity("OrderingService.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56d5d4c0-f660-45dc-80c9-ac7560c68444"),
                            Email = "spritefok1@gmail.com",
                            FirstName = "Shawn",
                            HashedPassword = "AQAAAAEAACcQAAAAEGN8b881h55AuyRSl6A5lA9H+JC5uOzEBgST5ONL38zFFzkmFDrAhe1GMzHqusGlCg==",
                            ImageUrl = "https://wildermuth.com/img/shawn-head.gif",
                            LastName = "Wildermuth",
                            PhoneNumber = "+37533655993",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("5c9d8a55-75a7-456d-9587-18fe1f03e8e1"),
                            Email = "spritefok2@gmail.com",
                            FirstName = "Mike",
                            HashedPassword = "AQAAAAEAACcQAAAAEK5lYUJ0fJ4qSiPFPRECzRpAaLECB5+byp4ZxK1+dXyhIr/X+tDH9CAM7liRYLLjTA==",
                            ImageUrl = "https://res.cloudinary.com/dofujaj9p/image/upload/v1585154354/egirl_ge9khz.jpg",
                            LastName = "Shinoda",
                            PhoneNumber = "+37533636993",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("5facbc29-a063-4662-9a53-9b7c54483792"),
                            Email = "spritefok3@gmail.com",
                            FirstName = "Chester",
                            HashedPassword = "AQAAAAEAACcQAAAAENrPmJAKuHZ/PNjdVKUSyz/jolJO17mGq6AkKm93H3vhdOppcIvYbJcO/ZoO5vi04g==",
                            ImageUrl = "https://wildermuth.com/img/shawn-head.gif",
                            LastName = "Bennington",
                            PhoneNumber = "+37533636993",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("d7a1b12a-aa05-4c0e-b11b-a17ea8141d75"),
                            Email = "spritefok4@gmail.com",
                            FirstName = "Philip",
                            HashedPassword = "AQAAAAEAACcQAAAAECEebrhangJxcMDt8Bo/dw9cyDOZO2mCuJbbuBBIamXJpYTQ+zUfDBhcXZSEOlLohA==",
                            ImageUrl = "https://res.cloudinary.com/dofujaj9p/image/upload/v1585154354/egirl_ge9khz.jpg",
                            LastName = "Khamitsevich",
                            PhoneNumber = "+37533636993",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("88aecc17-f381-403c-99dc-311a56725a63"),
                            Email = "spritefok5@gmail.com",
                            FirstName = "Sam",
                            HashedPassword = "AQAAAAEAACcQAAAAEOTIDwbop7wFQr/JSj6+PEv7CRQiYkSqq7HpyHgfr7gWh+BLv1vQ30v2nYQtRnOiaQ==",
                            ImageUrl = "https://wildermuth.com/img/shawn-head.gif",
                            LastName = "Robinson",
                            PhoneNumber = "+37533636993",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("594679c1-241d-4dbe-b1a6-307a2c477531"),
                            Email = "spritefok6@gmail.com",
                            FirstName = "Kio",
                            HashedPassword = "AQAAAAEAACcQAAAAECC6p5sWB11gG2FfkOCrSZp59vvuc2iH2L1GN1MmM1xwtKZ4RVe+n7B3EGPAz8gHOQ==",
                            ImageUrl = "https://res.cloudinary.com/dofujaj9p/image/upload/v1585154354/egirl_ge9khz.jpg",
                            LastName = "Shima",
                            PhoneNumber = "+37533636993",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("7f0fac7a-2490-4c8e-804e-b4942f2b90ea"),
                            Email = "spritefok7@gmail.com",
                            FirstName = "Yura",
                            ImageUrl = "https://wildermuth.com/img/shawn-head.gif",
                            LastName = "Vasya",
                            PhoneNumber = "+37533636993",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("d0d1b0b8-0033-42b9-a800-daecc05277ae"),
                            Email = "spritefok8@gmail.com",
                            FirstName = "Petya",
                            ImageUrl = "https://res.cloudinary.com/dofujaj9p/image/upload/v1585154354/egirl_ge9khz.jpg",
                            LastName = "Jesus",
                            PhoneNumber = "+37533636993",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("OrderingService.Data.Models.EmployeeProfile", b =>
                {
                    b.HasOne("OrderingService.Data.Models.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("OrderingService.Data.Models.User", "User")
                        .WithOne("EmployeeProfile")
                        .HasForeignKey("OrderingService.Data.Models.EmployeeProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OrderingService.Data.Models.Review", b =>
                {
                    b.HasOne("OrderingService.Data.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OrderingService.Data.Models.EmployeeProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderingService.Data.Models.ServiceOrder", b =>
                {
                    b.HasOne("OrderingService.Data.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OrderingService.Data.Models.EmployeeProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderingService.Data.Models.User", b =>
                {
                    b.HasOne("OrderingService.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
